// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserSchema {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstname  String
  lastname   String
  patronymic String?

  birthday  DateTime?
  avatarUrl String?
  Patient   PatientSchema[]

  Staff     StaffSchema[]
  UserPhone UserPhone[]
  UserEmail UserEmail[]
}

model UserPhone {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  user     UserSchema @relation(fields: [userId], references: [id])
  phone    String
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt()
  userId   String     @db.ObjectId
}

model UserEmail {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  user     UserSchema @relation(fields: [userId], references: [id])
  email    String
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt()
  userId   String     @db.ObjectId
}

model ClinicSchema {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String
  address   String
  avatarUrl String

  Patient PatientSchema[]

  createAt  DateTime          @default(now())
  updateAt  DateTime          @updatedAt()
  StaffRole StaffRoleSchema[]
  Staff     StaffSchema[]
}

model PatientSchema {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  user   UserSchema @relation(fields: [userId], references: [id])
  userId String     @db.ObjectId

  clinic              ClinicSchema           @relation(fields: [clinicId], references: [id])
  clinicId            String                 @db.ObjectId
  MedicalHistory      MedicalHistorySchema[]
  PatientTest         PatientTest[]
  PatientTemperatur   PatientTemperatur[]
  MedicalManipulation MedicalManipulation[]
}

model StaffRoleSchema {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  clinic   ClinicSchema  @relation(fields: [clinicId], references: [id])
  clinicId String        @db.ObjectId
  Staff    StaffSchema[]
  rules    String[]
  createAt DateTime      @default(now())
  updateAt DateTime      @updatedAt()
}

model StaffSchema {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   UserSchema @relation(fields: [userId], references: [id])
  userId String     @db.ObjectId

  clinic   ClinicSchema @relation(fields: [clinicId], references: [id])
  clinicId String       @db.ObjectId

  role                StaffRoleSchema       @relation(fields: [staffRoleId], references: [id])
  staffRoleId         String                @db.ObjectId
  createAt            DateTime              @default(now())
  updateAt            DateTime              @updatedAt()
  MedicalManipulation MedicalManipulation[]
}

model MedicalHistorySchema {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  pacient   PatientSchema @relation(fields: [patientId], references: [id])
  patientId String        @db.ObjectId

  diagnosis String

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt()

  attachment                  Attachment[]
  PatientTestOnMedicalHistory PatientTestOnMedicalHistory[]
  recomendation               Recomedation[]

  temperaturSheet PatientTemperatur[]
}

model Recomedation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type             String
  value            String
  MedicalHistory   MedicalHistorySchema? @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId String?               @db.ObjectId
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type                  String
  value                 String
  MedicalHistory        MedicalHistorySchema? @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId      String?               @db.ObjectId
  PatientTest           PatientTest?          @relation(fields: [patientTestId], references: [id])
  patientTestId         String?               @db.ObjectId
  MedicalManipulation   MedicalManipulation?  @relation(fields: [medicalManipulationId], references: [id])
  medicalManipulationId String?               @db.ObjectId
}

model PatientTemperatur {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  pacient  PatientSchema @relation(fields: [patientId], references: [id])
  timeTest DateTime

  bodyTemperature Float?
  pulse           Int?
  bloodPressure   Int?

  bodyWeight      Float?
  respiratoryRate Float?
  liquidConsumed  Float?
  numberOfUrine   Float?

  sanitaryTreatment Boolean?
  defecation        Boolean?

  createAt         DateTime              @default(now())
  updateAt         DateTime              @updatedAt()
  patientId        String                @db.ObjectId
  MedicalHistory   MedicalHistorySchema? @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId String?               @db.ObjectId
}

model PatientTest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patient   PatientSchema @relation(fields: [patientId], references: [id])
  patientId String        @db.ObjectId

  name    String
  comment String
  result  String?

  attachment Attachment[]

  started  DateTime?
  finished DateTime?

  createAt                    DateTime                      @default(now())
  updateAt                    DateTime                      @updatedAt()
  PatientTestOnMedicalHistory PatientTestOnMedicalHistory[]
}

model PatientTestOnMedicalHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  test                  PatientTest          @relation(fields: [patientTestId], references: [id])
  patientTestId         String               @db.ObjectId
  medicalHistory        MedicalHistorySchema @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId      String               @db.ObjectId
  MedicalManipulation   MedicalManipulation? @relation(fields: [medicalManipulationId], references: [id])
  medicalManipulationId String?              @db.ObjectId
}

model MedicalManipulation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  patient   PatientSchema @relation(fields: [patientId], references: [id])
  patientId String        @db.ObjectId
  staff     StaffSchema   @relation(fields: [staffId], references: [id])

  name    String
  comment String

  result String?

  attachment Attachment[]

  started  DateTime?
  finished DateTime?

  createAt                    DateTime                      @default(now())
  updateAt                    DateTime                      @updatedAt()
  PatientTestOnMedicalHistory PatientTestOnMedicalHistory[]
  staffId                     String                        @db.ObjectId
}
